/// <reference types="node" />
import EventEmitter from "events";
import { SessionCallback } from "./query-session-pool";
import { ISslCredentials } from "../utils/ssl-credentials";
import { IPoolSettings } from "../driver";
import DiscoveryService from "../discovery/discovery-service";
import { Logger } from "../logging";
import { ClientOptions } from "../utils";
import { IAuthService } from "../credentials/i-auth-service";
import { Ydb } from "ydb-sdk-proto";
export interface IQueryClientSettings {
    database: string;
    authService: IAuthService;
    sslCredentials?: ISslCredentials;
    poolSettings?: IPoolSettings;
    clientOptions?: ClientOptions;
    discoveryService: DiscoveryService;
    logger: Logger;
}
interface IDoOpts<T> {
    txSettong?: Ydb.Query.ITransactionSettings;
    fn: SessionCallback<T>;
    timeout?: number;
}
/**
 * YDB Query Service client.
 *
 * # Experimental
 *
 * Notice: This API is EXPERIMENTAL and may be changed or removed in a later release.
 */
export declare class QueryClient extends EventEmitter {
    private pool;
    private logger;
    constructor(settings: IQueryClientSettings);
    destroy(): Promise<void>;
    do<T>(opts: IDoOpts<T>): Promise<T>;
    doTx<T>(opts: IDoOpts<T>): Promise<T>;
}
export {};
