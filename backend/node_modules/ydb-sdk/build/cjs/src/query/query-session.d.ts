/// <reference types="node" />
import EventEmitter from "events";
import { QueryService, SessionBuilder } from "./query-session-pool";
import { Endpoint } from "../discovery";
import { Logger } from "../logging";
import { Ydb } from "ydb-sdk-proto";
import { ClientReadableStream } from "@grpc/grpc-js";
import * as symbols from './symbols';
import ICreateSessionResult = Ydb.Table.ICreateSessionResult;
import { attach as attachImpl } from './query-session-attach';
import { execute as executeImpl } from './query-session-execute';
import { beginTransaction, commitTransaction, rollbackTransaction as rollbackTransactionImpl } from './query-session-transaction';
/**
 * Service methods, as they name in GRPC.
 */
export declare const enum Query_V1 {
    CreateSession = "/Ydb.Query.V1.QueryService/CreateSession",
    DeleteSession = "/Ydb.Query.V1.QueryService/DeleteSession",
    AttachSession = "/Ydb.Query.V1.QueryService/AttachSession",
    BeginTransaction = "/Ydb.Query.V1.QueryService/BeginTransaction",
    CommitTransaction = "/Ydb.Query.V1.QueryService/CommitTransaction",
    RollbackTransaction = "/Ydb.Query.V1.QueryService/RollbackTransaction",
    ExecuteQuery = "/Ydb.Query.V1.QueryService/ExecuteQuery",
    ExecuteScript = "/Ydb.Query.V1.QueryService/ExecuteScript",
    FetchScriptResults = "/Ydb.Query.V1.QueryService/FetchScriptResults"
}
export interface QuerySessionOperation {
    cancel(reason: any): void;
}
export declare const api: unique symbol;
export declare const impl: unique symbol;
export declare const attachStream: unique symbol;
export declare class QuerySession extends EventEmitter implements ICreateSessionResult {
    endpoint: Endpoint;
    readonly logger: Logger;
    [symbols.sessionCurrentOperation]?: QuerySessionOperation;
    [symbols.sessionId]: string;
    [symbols.sessionTxId]?: string;
    [symbols.sessionTxSettings]?: Ydb.Query.ITransactionSettings;
    [impl]: SessionBuilder;
    [attachStream]?: ClientReadableStream<Ydb.Query.SessionState>;
    [api]: QueryService;
    private beingDeleted;
    private free;
    private closing;
    get sessionId(): string;
    get txId(): string | undefined;
    private constructor();
    static [symbols.create](// TODO: Change to named parameters for consistency
    api: QueryService, impl: SessionBuilder, endpoint: Endpoint, sessionId: string, logger: Logger): QuerySession;
    [symbols.sessionAcquire](): this;
    [symbols.sessionRelease](): void;
    [symbols.sessionIsFree](): boolean;
    [symbols.sessionIsClosing](): boolean;
    [symbols.sessionDeleteOnRelease](): void;
    [symbols.sessionIsDeleted](): boolean;
    delete(): Promise<void>;
    [symbols.sessionAttach]: typeof attachImpl;
    beginTransaction(txSettings?: Ydb.Query.ITransactionSettings | null): Promise<void>;
    commitTransaction(): Promise<Ydb.Query.CommitTransactionResponse>;
    rollbackTransaction(): Promise<Ydb.Query.RollbackTransactionResponse>;
    [symbols.sessionBeginTransaction]: typeof beginTransaction;
    [symbols.sessionCommitTransaction]: typeof commitTransaction;
    [symbols.sessionRollbackTransaction]: typeof rollbackTransactionImpl;
    execute: typeof executeImpl;
}
