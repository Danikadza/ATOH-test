"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuerySession = exports.attachStream = exports.impl = exports.api = void 0;
const events_1 = __importDefault(require("events"));
const query_session_pool_1 = require("./query-session-pool");
const retries_1 = require("../retries");
const utils_1 = require("../utils");
const process_ydb_operation_result_1 = require("../utils/process-ydb-operation-result");
const symbols = __importStar(require("./symbols"));
const query_session_attach_1 = require("./query-session-attach");
const query_session_execute_1 = require("./query-session-execute");
const query_session_transaction_1 = require("./query-session-transaction");
exports.api = Symbol('api');
exports.impl = Symbol('impl');
exports.attachStream = Symbol('attachStream');
class QuerySession extends events_1.default {
    get sessionId() {
        return this[symbols.sessionId];
    }
    get txId() {
        return this[symbols.sessionTxId];
    }
    constructor(// TODO: Change to named parameters for consistency
    _api, _impl, endpoint, sessionId, logger) {
        super();
        this.endpoint = endpoint;
        this.logger = logger;
        // TODO: Move those fields to SessionBase
        this.beingDeleted = false;
        this.free = true;
        this.closing = false;
        // TODO: Uncomment after switch to TS 5.3
        // [Symbol.asyncDispose]() {
        //     return this.delete();
        // }
        this[_a] = query_session_attach_1.attach;
        this[_b] = query_session_transaction_1.beginTransaction;
        this[_c] = query_session_transaction_1.commitTransaction;
        this[_d] = query_session_transaction_1.rollbackTransaction;
        this.execute = query_session_execute_1.execute;
        this[exports.api] = _api;
        this[exports.impl] = _impl;
        this[symbols.sessionId] = sessionId;
    }
    static [(symbols.sessionCurrentOperation, symbols.sessionId, symbols.sessionTxId, symbols.sessionTxSettings, symbols.create)](// TODO: Change to named parameters for consistency
    api, impl, endpoint, sessionId, logger) {
        return new QuerySession(api, impl, endpoint, sessionId, logger);
    }
    [symbols.sessionAcquire]() {
        this.free = false;
        this.logger.debug(`Acquired session ${this.sessionId} on endpoint ${this.endpoint.toString()}.`);
        return this;
    }
    [symbols.sessionRelease]() {
        if (this[symbols.sessionCurrentOperation])
            throw new Error('There is an active operation');
        this.free = true;
        this.logger.debug(`Released session ${this.sessionId} on endpoint ${this.endpoint.toString()}.`);
        this.emit(query_session_pool_1.SessionEvent.SESSION_RELEASE, this);
    }
    [symbols.sessionIsFree]() {
        return this.free && !this[symbols.sessionIsDeleted]();
    }
    [symbols.sessionIsClosing]() {
        return this.closing;
    }
    [symbols.sessionDeleteOnRelease]() {
        this.closing = true;
    }
    [symbols.sessionIsDeleted]() {
        return this.beingDeleted;
    }
    async delete() {
        var _e;
        if (this[symbols.sessionIsDeleted]())
            return;
        this.beingDeleted = true;
        await ((_e = this[exports.attachStream]) === null || _e === void 0 ? void 0 : _e.cancel());
        delete this[exports.attachStream]; // only one stream cancel even when multi ple retries
        (0, process_ydb_operation_result_1.ensureCallSucceeded)(await this[exports.api].deleteSession({ sessionId: this.sessionId }));
    }
    async beginTransaction(txSettings = null) {
        if (this[symbols.sessionTxSettings])
            throw new Error(query_session_execute_1.CANNOT_MANAGE_TRASACTIONS_ERROR);
        return query_session_transaction_1.beginTransaction.call(this, txSettings);
    }
    async commitTransaction() {
        if (this[symbols.sessionTxSettings])
            throw new Error(query_session_execute_1.CANNOT_MANAGE_TRASACTIONS_ERROR);
        return query_session_transaction_1.commitTransaction.call(this);
    }
    async rollbackTransaction() {
        if (this[symbols.sessionTxSettings])
            throw new Error(query_session_execute_1.CANNOT_MANAGE_TRASACTIONS_ERROR);
        return query_session_transaction_1.rollbackTransaction.call(this);
    }
}
exports.QuerySession = QuerySession;
_a = symbols.sessionAttach, _b = symbols.sessionBeginTransaction, _c = symbols.sessionCommitTransaction, _d = symbols.sessionRollbackTransaction;
__decorate([
    (0, retries_1.retryable)(),
    utils_1.pessimizable
], QuerySession.prototype, "delete", null);
