"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClient = void 0;
const events_1 = __importDefault(require("events"));
const query_session_pool_1 = require("./query-session-pool");
const table_1 = require("../table");
const retries_1 = require("../retries");
const symbols = __importStar(require("./symbols"));
const errors_1 = require("../errors");
/**
 * YDB Query Service client.
 *
 * # Experimental
 *
 * Notice: This API is EXPERIMENTAL and may be changed or removed in a later release.
 */
class QueryClient extends events_1.default {
    constructor(settings) {
        super();
        this.logger = settings.logger;
        this.pool = new query_session_pool_1.QuerySessionPool(settings);
    }
    async destroy() {
        await this.pool.destroy();
    }
    async do(opts) {
        // TODO: Bypass idempotency state to retrier
        return (0, retries_1.withRetries)(async () => {
            const session = await this.pool.acquire();
            let error;
            try {
                if (opts.txSettong)
                    session[symbols.sessionTxSettings] = opts.txSettong;
                let res;
                try {
                    res = await opts.fn(session);
                }
                catch (err) {
                    if (session[symbols.sessionTxId] && !(err instanceof errors_1.BadSession || err instanceof errors_1.SessionBusy)) {
                        await session[symbols.sessionRollbackTransaction]();
                    }
                    throw err;
                }
                if (session[symbols.sessionTxId]) { // there is an open transaction within session
                    if (opts.txSettong) {
                        // likely doTx was called and user expects have the transaction being commited
                        await session[symbols.sessionCommitTransaction]();
                    }
                    else {
                        // likely do() was called and user intentionally haven't closed transaction
                        await session[symbols.sessionRollbackTransaction]();
                    }
                }
                return res;
            }
            catch (err) {
                error = err;
                throw err;
            }
            finally {
                // TODO: Cleanup idempotentocy
                // delete session[symbols.sessionTxId];
                delete session[symbols.sessionTxSettings];
                delete session[symbols.sessionCurrentOperation];
                if (error instanceof errors_1.BadSession || error instanceof errors_1.SessionBusy) {
                    this.logger.debug('Encountered bad or busy session, re-creating the session');
                    session.emit(query_session_pool_1.SessionEvent.SESSION_BROKEN);
                }
                else {
                    session[symbols.sessionRelease]();
                }
            }
        });
    }
    doTx(opts) {
        if (!opts.txSettong) {
            opts = Object.assign(Object.assign({}, opts), { txSettong: table_1.AUTO_TX.beginTx });
        }
        return this.do(opts);
    }
}
exports.QueryClient = QueryClient;
