/// <reference types="node" />
import { EventEmitter } from "events";
import { DescribePathResult, DescribePathSettings, IPermissionsAction, ListDirectoryResult, ListDirectorySettings, MakeDirectorySettings, ModifyPermissionsSettings, RemoveDirectorySettings } from "./scheme-service";
import { IAuthService } from "../credentials/i-auth-service";
import { ISslCredentials } from "../utils/ssl-credentials";
import { ClientOptions } from "../utils";
import DiscoveryService from "../discovery/discovery-service";
import { Logger } from "../logging";
interface ISchemeClientSettings {
    database: string;
    authService: IAuthService;
    sslCredentials?: ISslCredentials;
    clientOptions?: ClientOptions;
    discoveryService: DiscoveryService;
    logger: Logger;
}
export default class SchemeClient extends EventEmitter {
    private settings;
    private schemeServices;
    constructor(settings: ISchemeClientSettings);
    private getSchemeService;
    makeDirectory(path: string, settings?: MakeDirectorySettings): Promise<void>;
    removeDirectory(path: string, settings?: RemoveDirectorySettings): Promise<void>;
    listDirectory(path: string, settings?: ListDirectorySettings): Promise<ListDirectoryResult>;
    describePath(path: string, settings?: DescribePathSettings): Promise<DescribePathResult>;
    modifyPermissions(path: string, permissionActions: IPermissionsAction[], clearPermissions?: boolean, settings?: ModifyPermissionsSettings): Promise<void>;
    destroy(): Promise<void>;
}
export {};
